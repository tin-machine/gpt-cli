name: Go Build

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - goos: linux
            goarch: amd64
          - goos: darwin
            goarch: amd64
          - goos: linux
            goarch: arm64
    steps:
    - name: Check out code into the Go module directory
      uses: actions/checkout@v2

    - name: Set up Go 1.x
      uses: actions/setup-go@v3
      with:
        go-version: '1.19'

    - name: Get dependencies
      run: go mod download

    - name: Build
      run: |
        echo "Building for ${{ matrix.goos }}/${{ matrix.goarch }}"
        GOOS=${{ matrix.goos }} GOARCH=${{ matrix.goarch }} go build -v -o build/gpt-cli-${{ matrix.goos }}-${{ matrix.goarch }} ./...

    - name: Run tests
      run: go test -v ./...

    - name: Upload artifacts
      uses: actions/upload-artifact@v2
      with:
        name: gpt-cli-${{ matrix.goos }}-${{ matrix.goarch }}
        path: build/gpt-cli-${{ matrix.goos }}-${{ matrix.goarch }}

    - name: Create or Update Release
      id: create_release
      run: |
        # Install octokit
        npm install @octokit/rest

        # Create or update the release
        node <<EOF
        const { Octokit } = require("@octokit/rest");
        const octokit = new Octokit({ auth: process.env.GITHUB_TOKEN });

        (async () => {
          try {
            const release = await octokit.repos.getReleaseByTag({
              owner: process.env.GITHUB_REPOSITORY_OWNER,
              repo: process.env.GITHUB_REPOSITORY.split('/')[1],
              tag: process.env.GITHUB_REF.replace('refs/tags/', ''),
            });

            // Update the existing release
            await octokit.repos.updateRelease({
              owner: process.env.GITHUB_REPOSITORY_OWNER,
              repo: process.env.GITHUB_REPOSITORY.split('/')[1],
              release_id: release.data.id,
              tag_name: process.env.GITHUB_REF.replace('refs/tags/', ''),
              name: 'Release ' + process.env.GITHUB_REF.replace('refs/tags/', ''),
              draft: false,
              prerelease: false,
            });

          } catch (error) {
            if (error.status === 404) {
              // Create a new release if not found
              await octokit.repos.createRelease({
                owner: process.env.GITHUB_REPOSITORY_OWNER,
                repo: process.env.GITHUB_REPOSITORY.split('/')[1],
                tag_name: process.env.GITHUB_REF.replace('refs/tags/', ''),
                name: 'Release ' + process.env.GITHUB_REF.replace('refs/tags/', ''),
                draft: false,
                prerelease: false,
              });
            } else {
              throw error;
            }
          }
        })();
        EOF
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Upload Release Asset
      if: startsWith(github.ref, 'refs/tags/')
      uses: actions/upload-release-asset@v1
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: build/gpt-cli-${{ matrix.goos }}-${{ matrix.goarch }}
        asset_name: gpt-cli-${{ matrix.goos }}-${{ matrix.goarch }}
        asset_content_type: application/octet-stream
