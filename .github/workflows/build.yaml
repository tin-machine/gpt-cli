name: Go Build

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - goos: linux
            goarch: amd64
          - goos: darwin
            goarch: amd64
          - goos: linux
            goarch: arm64
    steps:
    - name: Check out code into the Go module directory
      uses: actions/checkout@v2

    - name: Set up Go 1.x
      uses: actions/setup-go@v3
      with:
        go-version: '1.19'

    - name: Get dependencies
      run: go mod download

    - name: Build
      run: |
        echo "Building for ${{ matrix.goos }}/${{ matrix.goarch }}"
        GOOS=${{ matrix.goos }} GOARCH=${{ matrix.goarch }} go build -v -o build/gpt-cli-${{ matrix.goos }}-${{ matrix.goarch }} ./...

    - name: Run tests
      run: go test -v ./...

    - name: Upload artifacts
      uses: actions/upload-artifact@v2
      with:
        name: gpt-cli-${{ matrix.goos }}-${{ matrix.goarch }}
        path: build/gpt-cli-${{ matrix.goos }}-${{ matrix.goos }}

    - name: Create Release
      if: startsWith(github.ref, 'refs/tags/')
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.PAT_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        draft: false
        prerelease: false

    - name: Upload Release Asset
      if: startsWith(github.ref, 'refs/tags/')
      uses: actions/upload-release-asset@v1
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: build/gpt-cli-${{ matrix.goos }}-${{ matrix.goarch }}
        asset_name: gpt-cli-${{ matrix.goos }}-${{ matrix.goarch }}
        asset_content_type: application/octet-stream
