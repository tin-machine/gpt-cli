name: Go Build

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - goos: linux
            goarch: amd64
          - goos: darwin
            goarch: amd64
          - goos: linux
            goarch: arm64
    steps:
    - name: Check out code into the Go module directory
      uses: actions/checkout@v2

    - name: Set up Go 1.x
      uses: actions/setup-go@v3
      with:
        go-version: '1.19'

    - name: Get dependencies
      run: go mod download

    - name: Build
      run: |
        echo "Building for ${{ matrix.goos }}/${{ matrix.goarch }}"
        GOOS=${{ matrix.goos }} GOARCH=${{ matrix.goarch }} go build -v -o build/gpt-cli-${{ matrix.goos }}-${{ matrix.goarch }} ./...

    - name: Run tests
      run: go test -v ./...

    - name: Upload artifacts
      uses: actions/upload-artifact@v2
      with:
        name: gpt-cli-${{ matrix.goos }}-${{ matrix.goarch }}
        path: build/gpt-cli-${{ matrix.goos }}-${{ matrix.goarch }}

    - name: Create or Update Release
      id: create_release
      uses: actions/github-script@v6
      with:
        script: |
          const { Octokit } = require("@octokit/rest");
          const octokit = new Octokit({ auth: process.env.GITHUB_TOKEN });

          async function createOrUpdateRelease() {
            try {
              const release = await octokit.repos.getReleaseByTag({
                owner: context.repo.owner,
                repo: context.repo.repo,
                tag: '${{ github.ref }}',
              });

              // Update the existing release
              const updatedRelease = await octokit.repos.updateRelease({
                owner: context.repo.owner,
                repo: context.repo.repo,
                release_id: release.data.id,
                tag_name: '${{ github.ref }}',
                name: 'Release ${{ github.ref }}',
                draft: false,
                prerelease: false,
              });

              return updatedRelease.data.upload_url;
            } catch (error) {
              if (error.status === 404) {
                // Create a new release if not found
                const newRelease = await octokit.repos.createRelease({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  tag_name: '${{ github.ref }}',
                  name: 'Release ${{ github.ref }}',
                  draft: false,
                  prerelease: false,
                });

                return newRelease.data.upload_url;
              } else {
                throw error;
              }
            }
          }

          return createOrUpdateRelease();
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Upload Release Asset
      if: startsWith(github.ref, 'refs/tags/')
      uses: actions/upload-release-asset@v1
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: build/gpt-cli-${{ matrix.goos }}-${{ matrix.goarch }}
        asset_name: gpt-cli-${{ matrix.goos }}-${{ matrix.goarch }}
        asset_content_type: application/octet-stream
