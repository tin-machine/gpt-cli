name: Go Build

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]

jobs:
  create-release:
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    steps:
    - name: Create Release
      if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        draft: false
        prerelease: false
    - name: Upload Release URL
      run: echo "upload_url=${{ steps.create_release.outputs.upload_url }}"
    - name: need create-release outputs value
      run: echo ${{ needs.create-release.outputs.upload_url }}

  build:
    runs-on: ubuntu-latest
    needs: create-release
    strategy:
      matrix:
        include:
          - goos: linux
            goarch: amd64
          - goos: darwin
            goarch: amd64
          - goos: linux
            goarch: arm64

    steps:
    - name: Check out code into the Go module directory
      uses: actions/checkout@v2
      with:
        fetch-depth: 0

    - name: Set up Go 1.x
      uses: actions/setup-go@v3
      with:
        go-version: '1.22'

    - name: Get dependencies
      run: go mod download

    - name: Determine version from GitHub API
      id: determine_version
      run: |
        VERSION=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
          https://api.github.com/repos/${{ github.repository }}/releases/latest | jq -r .tag_name)
        echo "VERSION=${VERSION}" >> $GITHUB_ENV

    - name: Build
      run: |
        echo "Building for ${{ matrix.goos }}/${{ matrix.goarch }}"
        GOOS=${{ matrix.goos }} GOARCH=${{ matrix.goarch }} go build -ldflags="-X main.version=${{ env.VERSION }}" -v -o build/gpt-cli-${{ matrix.goos }}-${{ matrix.goarch }} ./...

    - name: Run tests
      run: go test -v ./...

    - name: Upload artifacts
      uses: actions/upload-artifact@v2
      with:
        name: gpt-cli-${{ matrix.goos }}-${{ matrix.goarch }}
        path: build/gpt-cli-${{ matrix.goos }}-${{ matrix.goarch }}

    - run: echo ${{ needs.create-release.outputs.upload_url }}

    - name: Upload Release Asset
      if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create-release.outputs.upload_url }}
        asset_path: build/gpt-cli-${{ matrix.goos }}-${{ matrix.goarch }}
        asset_name: gpt-cli-${{ matrix.goos }}-${{ matrix.goarch }}
        asset_content_type: application/octet-stream

