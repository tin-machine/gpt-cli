name: Go Build and Release

on:
  pull_request:
    branches: [ main ]
  push:
    branches: [ main ]

jobs:
  build:
    name: Build and Test
    runs-on: ubuntu-latest
    strategy:
      matrix:
        goos: [linux, darwin]
        goarch: [amd64, arm64]
    steps:
      - name: Check out code
        uses: actions/checkout@v3

      - name: Set up Go
        uses: actions/setup-go@v3
        with:
          go-version: '1.21'  # 最新の安定版を指定

      - name: Get dependencies
        run: go mod download

      - name: Run tests
        run: go test -v ./...

      - name: Build
        run: |
          echo "Building for ${{ matrix.goos }}/${{ matrix.goarch }}"
          mkdir -p build
          GOOS=${{ matrix.goos }} GOARCH=${{ matrix.goarch }} go build -ldflags="-X main.Version=${{ github.sha }}" -v -o build/gpt-cli-${{ matrix.goos }}-${{ matrix.goarch }} ./...

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: gpt-cli-${{ matrix.goos }}-${{ matrix.goarch }}
          path: build/gpt-cli-${{ matrix.goos }}-${{ matrix.goarch }}

  release:
    name: Create Release
    needs: build
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: build

      - name: print pwd
        run: pwd

      - name: print ls
        run: ls

      - name: List build directory
        run: ls -la build

      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ github.run_number }}
          release_name: Release v${{ github.run_number }}
          body: |
            Automated release from workflow run ${{ github.run_number }}.
          draft: false
          prerelease: false

      - name: Upload Release Assets
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file_glob: true
          file: build/gpt*
          overwrite: true
          asset_name: "{{name}}"
          tag: v${{ github.run_number }}
