name: Go Build

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - goos: linux
            goarch: amd64
          - goos: linux
            goarch: arm64
          - goos: darwin
            goarch: amd64
    outputs:
      version: ${{ steps.set_version.outputs.version }} # この変数はbuildという名前のジョブで実行されるので needs.build.outputs.version で参照できる。
    steps:
      - name: Check out code into the Go module directory
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v3
        with:
          go-version-file: 'go.mod'

      - name: Get dependencies
        run: go mod download

      - name: set tag name output
        id: set_version
        run: |
          if [ "${{ github.ref_type }}" = "tag" ]; then
            echo "version=${{ github.ref_name }}" >> "$GITHUB_OUTPUT"
          else
            echo "version=${{ github.sha }}" >> "$GITHUB_OUTPUT"
          fi

      - name: Build
        run: |
          echo "Building for ${{ matrix.goos }}/${{ matrix.goarch }}"
          mkdir -p build
          GOOS=${{ matrix.goos }} GOARCH=${{ matrix.goarch }} go build -ldflags="-X main.Version=${{ env.tag }}" -v -o build/gpt-cli-${{ matrix.goos }}-${{ matrix.goarch }} ./...
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: gpt-cli-${{ matrix.goos }}-${{ matrix.goarch }}
          path: build/gpt-cli-${{ matrix.goos }}-${{ matrix.goarch }}
  release:
    name: release
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
    needs: build
    permissions:
      contents: write
    steps:
      - name: Check out code into the Go module directory
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Download artifacts
        uses: actions/download-artifact@v4
      - name: Display file
        run: ls -R
      - name: Create and Upload Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          VERSION: ${{ needs.build.outputs.version }}
        run: |
          echo ${VERSION}
          ls -R
          gh release create --title "${VERSION}" --generate-notes "${VERSION}"
          gh release upload "${VERSION}" gpt-cli-darwin-amd64/gpt-cli-darwin-amd64 gpt-cli-linux-amd64/gpt-cli-linux-amd64 gpt-cli-linux-arm64/gpt-cli-linux-arm64
