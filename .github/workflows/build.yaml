name: Go Build

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - goos: linux
            goarch: amd64
          - goos: linux
            goarch: arm64
          - goos: darwin
            goarch: amd64
    outputs:
      VERSION: ${{ steps.set_version.outputs.VERSION }}
    steps:
    - name: Check out code into the Go module directory
      uses: actions/checkout@v2
      with:
        fetch-depth: 0

    - name: Set up Go
      uses: actions/setup-go@v3
      with:
        go-version-file: 'go.mod'

    - name: Get dependencies
      run: go mod download

    - name: Set Version
      id: set_version
      run: |
        if [ "${{ github.ref_type }}" = "tag" ]; then
          echo "VERSION=${{ github.ref_name }}" >> $GITHUB_ENV
        else
          echo "VERSION=${{ github.sha }}" >> $GITHUB_ENV
        fi
        echo "Version is ${{ env.VERSION }}"

    - name: Build
      run: |
        echo "Building for ${{ matrix.goos }}/${{ matrix.goarch }}"
        mkdir -p build
        GOOS=${{ matrix.goos }} GOARCH=${{ matrix.goarch }} go build -ldflags="-X main.Version=${{ env.VERSION }}" -v -o build/gpt-cli-${{ matrix.goos }}-${{ matrix.goarch }} ./...
    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: gpt-cli-${{ matrix.goos }}-${{ matrix.goarch }}
        path: build/gpt-cli-${{ matrix.goos }}-${{ matrix.goarch }}
  release:
    name: release
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
    needs: build
    permissions:
      contents: write
    steps:
      - name: Check out code
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Download artifacts
        uses: actions/download-artifact@v3
        with:
          name: build
          path: build
      - name: Create and Upload Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          VERSION: ${{ github.ref_name }}
        run: |
          gh release create "${VERSION}" --title "${VERSION}" --generate-notes
          gh release upload "${VERSION}" build/*
